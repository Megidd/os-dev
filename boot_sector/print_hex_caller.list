     1 00000000 BAB61F                  mov dx,0x1fb6
     2 00000003 E80F00                  call print_hex		;print_hex modifies HEX_OUT content according to dx
     3 00000006 BB[0E00]                mov bx, HEX_OUT		;bx is parameter to print_string
     4 00000009 E88D00                  call print_string
     5                                  
     6 0000000C EBFE                    jmp $	;jump forever
     7                                  
     8                                  HEX_OUT:
     9 0000000E 30783030303000          	db '0x0000',0x00
    10                                  	;   ||||||  |
    11                                  	;   012345  6	-> location of bytes at HEX_OUT
    12                                  
    13                                  %include 'print_hex_callee.asm'
     1                              <1> print_hex:
     2 00000015 60                  <1> 	pusha
     3                              <1> 
     4                              <1> 	; 5th digit
     5 00000016 88D1                <1> 	mov cl,dl	;The least significant byte
     6 00000018 80E10F              <1> 	and cl,0x0f	;cl contains only a half-byte
     7 0000001B B500                <1> 	mov ch, 0x00
     8 0000001D 31F6                <1> 	xor si, si	;empty si
     9 0000001F 89CE                <1> 	mov si, cx
    10 00000021 81C6007C            <1> 	add si, 0x7c00
    11 00000025 81C6[8800]          <1> 	add si, HEX_MAP
    12 00000029 8A0C                <1> 	mov cl, [si]
    13 0000002B 880E[137C]          <1> 	mov [0x7c00+HEX_OUT+5], cl
    14                              <1> 
    15                              <1> 	; 4th digit
    16 0000002F 88D1                <1> 	mov cl,dl
    17 00000031 80E1F0              <1> 	and cl,0xf0
    18 00000034 C0E904              <1> 	shr cl,0x04	;shift cl to right, 4 times
    19 00000037 80E10F              <1> 	and cl,0x0f
    20 0000003A B500                <1> 	mov ch, 0x00
    21 0000003C 31F6                <1> 	xor si, si	;empty si
    22 0000003E 89CE                <1> 	mov si, cx
    23 00000040 81C6007C            <1> 	add si, 0x7c00
    24 00000044 81C6[8800]          <1> 	add si, HEX_MAP
    25 00000048 8A0C                <1> 	mov cl, [si]
    26 0000004A 880E[127C]          <1> 	mov [HEX_OUT+0x7c00+4], cl
    27                              <1> 
    28                              <1> 	; 3rd digit
    29 0000004E 88F1                <1> 	mov cl,dh
    30 00000050 80E10F              <1> 	and cl,0x0f
    31 00000053 B500                <1> 	mov ch, 0x00
    32 00000055 31F6                <1> 	xor si, si	;empty si
    33 00000057 89CE                <1> 	mov si, cx
    34 00000059 81C6007C            <1> 	add si, 0x7c00
    35 0000005D 81C6[8800]          <1> 	add si, HEX_MAP
    36 00000061 8A0C                <1> 	mov cl, [si]
    37 00000063 880E[117C]          <1> 	mov [HEX_OUT+0x7c00+3], cl
    38                              <1> 
    39                              <1> 	; 2nd digit
    40 00000067 88F1                <1> 	mov cl,dh
    41 00000069 80E1F0              <1> 	and cl,0xf0
    42 0000006C C0E904              <1> 	shr cl,0x04	;shitf cl to right, 4 times
    43 0000006F 80E10F              <1> 	and cl,0x0f
    44 00000072 B500                <1> 	mov ch, 0x00
    45 00000074 31F6                <1> 	xor si, si	;empty si
    46 00000076 89CE                <1> 	mov si, cx
    47 00000078 81C6007C            <1> 	add si, 0x7c00
    48 0000007C 81C6[8800]          <1> 	add si, HEX_MAP
    49 00000080 8A0C                <1> 	mov cl, [si]
    50 00000082 880E[107C]          <1> 	mov [HEX_OUT+0x7c00+2], cl
    51                              <1> 
    52                              <1> 	; 1st digit is already correct: 'x'
    53                              <1> 	; zero digit is already correct: '0'
    54                              <1> 
    55 00000086 61                  <1> 	popa
    56 00000087 C3                  <1> 	ret
    57                              <1> 
    58                              <1> HEX_MAP:
    59 00000088 303132333435363738- <1>  db '0123456789abcdef',0x00
    59 00000091 3961626364656600    <1>
    14                                  %include 'print_string_callee.asm'
     1                              <1> print_string:
     2 00000099 60                  <1> 	pusha	;push all registers to be polite
     3                              <1> 	
     4 0000009A B40E                <1> 	mov ah, 0x0e	;BIOS tele - type output
     5                              <1> 
     6 0000009C 81C3007C            <1> 	add bx,0x7c00	;boot sector is loaded at 0x7c00 address
     7                              <1> 			;therefore 0x7c00 needs to be added to the data address
     8                              <1> 			;to get the correct absolute data address
     9                              <1> 	
    10                              <1> print_next_byte:
    11 000000A0 8A07                <1> 	mov al,[bx]	;bx is used as function parameter
    12 000000A2 3C00                <1> 	cmp al,0x00
    13 000000A4 7405                <1> 	je null_terminated
    14 000000A6 CD10                <1> 	int 0x10
    15 000000A8 43                  <1> 	inc bx
    16 000000A9 EBF5                <1> 	jmp print_next_byte
    17                              <1> 	
    18                              <1> null_terminated:
    19 000000AB B00A                <1> 	mov al,0x0a	;new line character
    20 000000AD CD10                <1> 	int 0x10	;print a new line
    21 000000AF 61                  <1> 	popa	;pop all registers to be polite
    22 000000B0 C3                  <1> 	ret	;pop return address and jump to it
    15                                  
    16 000000B1 00<rept>                times 510-($-$$) db 0x00	;padding to fill the rest of 512-byte boot sector
    17                                  
    18 000001FE 55AA                    dw 0xaa55	;magic number
