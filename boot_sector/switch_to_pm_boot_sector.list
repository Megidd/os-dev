     1                                  [org 0x7c00]
     2                                  
     3                                  ; A boot sector that enters 32 - bit protected mode.
     4 00000000 BD0090                  mov bp, 0x9000
     5 00000003 89EC                    mov sp, bp
     6                                  
     7 00000005 BB[9D00]                mov bx, MSG_REAL_MODE
     8                                  ;call print_string
     9 00000008 E80500                  call print_string_abs
    10                                  
    11 0000000B E85400                  call switch_to_pm	; Note that we never return from here,
    12                                  			; because it will jump to BEGIN_PM
    13                                  
    14 0000000E EBFE                    jmp $
    15                                  
    16                                  ;%include "print_string_callee.asm"
    17                                  %include "print_string_abs.asm"
    18                              <1> print_string_abs:
    19 00000010 60                  <1> 	pusha	;push all registers to be polite
    20                              <1> 	
    21 00000011 B40E                <1> 	mov ah, 0x0e	;BIOS tele - type output
    22                              <1> 
    23                              <1> 	;add bx,0x7c00	;boot sector is loaded at 0x7c00 address
    24                              <1> 			;therefore 0x7c00 needs to be added to the data address
    25                              <1> 			;to get the correct absolute data address
    26                              <1> 	
    27                              <1> print_next_byte_abs:
    28 00000013 268A07              <1> 	mov al,[es:bx]	;bx is used as function parameter
    29 00000016 3C00                <1> 	cmp al,0x00
    30 00000018 7405                <1> 	je null_terminated_abs
    31 0000001A CD10                <1> 	int 0x10
    32 0000001C 43                  <1> 	inc bx
    33 0000001D EBF4                <1> 	jmp print_next_byte_abs
    34                              <1> 	
    35                              <1> null_terminated_abs:
    36 0000001F B00A                <1> 	mov al,0x0a	;new line character
    37 00000021 CD10                <1> 	int 0x10	;print a new line
    38 00000023 61                  <1> 	popa	;pop all registers to be polite
    39 00000024 C3                  <1> 	ret	;pop return address and jump to it
    40                                  %include "gdt.asm"
    41                              <1> gdt_start:
    42                              <1> 
    43                              <1> gdt_null:
    44 00000025 00000000            <1>  dd 0x00000000
    45 00000029 00000000            <1>  dd 0x00000000
    46                              <1> 
    47                              <1> gdt_code:	;the code segment descriptor
    48                              <1>  ; base =0x0 , limit =0 xfffff ,
    49                              <1>  ; 1st flags : ( present )1 ( privilege )00 ( descriptor type )1 -> 1001 b
    50                              <1>  ; type flags : ( code )1 ( conforming )0 ( readable )1 ( accessed )0 -> 1010 b
    51                              <1>  ; 2nd flags : ( granularity )1 (32 - bit default )1 (64 - bit seg )0 ( AVL )0 -> 1100 b
    52 0000002D FFFF                <1>  dw 0xffff	;limit=0xffff (bit 0 to 15)
    53 0000002F 0000                <1>  dw 0x0000	;base=0x0000 (bit 16 to 31)
    54 00000031 00                  <1>  db 0x00	;base=0x00 (bit 0 to 7) (start the second 32-bit)
    55 00000032 9A                  <1>  db 0b10011010	;present=1 privilege=00 descriptor-type=1 code=1 conforming=0 readable=1 accessed=0
    56 00000033 CF                  <1>  db 0b11001111	;granularity=1 32-bit-default=1 64-bit=0 available=0 limit=0xf=0b1111 (bit 16 to 19)
    57 00000034 00                  <1>  db 0x00	;base=0x00 (bit 24 to 31)
    58                              <1> 
    59                              <1> gdt_data:	;the data segment descriptor
    60                              <1>  ; Same as code segment except for the type flags :
    61                              <1>  ; type flags : ( code )0 ( expand down )0 ( writable )1 ( accessed )0 -> 0010 b
    62 00000035 FFFF                <1>  dw 0xffff      ;limit=0xffff (bit 0 to 15)
    63 00000037 0000                <1>  dw 0x0000      ;base=0x0000 (bit 16 to 31)
    64 00000039 00                  <1>  db 0x00        ;base=0x00 (bit 0 to 7) (start the second 32-bit)
    65 0000003A 92                  <1>  db 0b10010010  ;present=1 privilege=00 descriptor-type=1 code=0 expand-down=0 writable=1 accessed=0
    66 0000003B CF                  <1>  db 0b11001111  ;granularity=1 32-bit-default=1 64-bit=0 available=0 limit=0xf=0b1111 (bit 16 to 19)
    67 0000003C 00                  <1>  db 0x00        ;base=0x00 (bit 24 to 31)
    68                              <1> 
    69                              <1> gdt_end:
    70                              <1>  ; The reason for putting a label at the end of the
    71                              <1>  ; GDT is so we can have the assembler calculate
    72                              <1>  ; the size of the GDT for the GDT decriptor ( below )
    73                              <1> 
    74                              <1> ;GDT descriptor
    75                              <1> gdt_descriptor:
    76 0000003D 1700                <1>  dw gdt_end - gdt_start -1 	; Size of our GDT , always less one
    77                              <1> 				; of the true size
    78                              <1> 				; should be 3*8-byte=24-byte: 0d24=0x0018 ?
    79                              <1> 				; should be 0x0018-1=0x0017
    80 0000003F [25000000]          <1>  dd gdt_start
    81                              <1> 
    82                              <1> ; Define some handy constants for the GDT segment descriptor offsets , which
    83                              <1> ; are what segment registers must contain when in protected mode. For example ,
    84                              <1> ; when we set DS = 0 x10 in PM , the CPU knows that we mean it to use the
    85                              <1> ; segment described at offset 0 x10 ( i.e. 16 bytes ) in our GDT , which in our
    86                              <1> ; case is the DATA segment (0 x0 -> NULL ; 0x08 -> CODE ; 0 x10 -> DATA )
    87                              <1> CODE_SEG equ gdt_code - gdt_start ; shoule be 0x08 ?
    88                              <1> DATA_SEG equ gdt_data - gdt_start ; should be 0x10 ?
    89                                  %include "print_string_pm.asm"
    90                              <1> [bits 32]
    91                              <1> ;Define some constants
    92                              <1> VIDEO_MEMORY equ 0x000b8000
    93                              <1> WHITE_ON_BLACK equ 0x0000000f
    94                              <1> 
    95                              <1> ; prints a null - terminated string pointed to by EBX
    96                              <1> print_string_pm:
    97 00000043 60                  <1>  pusha
    98                              <1>  
    99 00000044 BA00800B00          <1>  mov edx, VIDEO_MEMORY ; Set edx to the start of vid mem.
   100 00000049 81C2800C0000        <1>  add edx, 0d3200	;0xb8000 + 2 * (row * 80 + col)
   101                              <1> 			;row=20, col=0 => VIDEO_MEMORY+0d3200
   102                              <1> 			;Video Graphics Array (VGA) colour text mode with dimmensions 80x25 characters
   103                              <1>  
   104                              <1>  print_string_pm_loop:
   105                              <1>   
   106 0000004F 8A03                <1>   mov al, [ebx]
   107 00000051 B40F                <1>   mov ah, WHITE_ON_BLACK
   108                              <1>   
   109 00000053 3C00                <1>   cmp al, 0x00
   110 00000055 7409                <1>   je print_string_pm_done	; if (al == 0) , at end of string , so
   111                              <1> 				; jump to done
   112                              <1>   
   113 00000057 668902              <1>   mov [edx], ax 	; Store char and attributes at current
   114                              <1> 			; character cell.
   115                              <1> 
   116 0000005A 43                  <1>   inc ebx		; Increment EBX to the next char in string.
   117 0000005B 83C202              <1>   add edx, 0x02		; Move to next character cell in vid mem.
   118 0000005E EBEF                <1>   jmp print_string_pm_loop
   119                              <1> 
   120                              <1> print_string_pm_done:
   121 00000060 61                  <1>  popa
   122 00000061 C3                  <1>  ret
   123                                  %include "switch_to_pm.asm"
   124                              <1> [bits 16]
   125                              <1> ;switch to protected mode
   126                              <1> 
   127                              <1> switch_to_pm:
   128                              <1> 
   129 00000062 FA                  <1>  cli 	; We must switch of interrupts until we have
   130                              <1> 	; set -up the protected mode interrupt vector
   131                              <1> 	; otherwise interrupts will run riot.
   132                              <1> 
   133 00000063 0F0116[3D00]        <1>  lgdt [gdt_descriptor]	; Load our global descriptor table , which defines
   134                              <1> 			; the protected mode segments ( e.g. for code and data )
   135                              <1> 
   136 00000068 0F20C0              <1>  mov eax, cr0
   137 0000006B 6683C801            <1>  or eax, 0x00000001
   138 0000006F 0F22C0              <1>  mov cr0, eax		; To make the switch to protected mode , we set
   139                              <1> 			; the first bit of CR0 , a control register
   140                              <1> 
   141 00000072 EA[7700]0800        <1>  jmp CODE_SEG:init_pm	; Make a far jump ( i.e. to a new segment ) to our 32 - bit
   142                              <1> 			; code. This also forces the CPU to flush its cache of
   143                              <1> 			; pre - fetched and real - mode decoded instructions , which can
   144                              <1> 			; cause problems.
   145                              <1> 
   146                              <1>  [bits 32]
   147                              <1> 
   148                              <1>  init_pm:
   149                              <1>   ; Initialise registers and the stack once in PM.
   150 00000077 66B81000            <1>   mov ax, DATA_SEG
   151 0000007B 8ED8                <1>   mov ds, ax
   152 0000007D 8ED0                <1>   mov ss, ax
   153 0000007F 8EC0                <1>   mov es, ax
   154 00000081 8EE0                <1>   mov fs, ax
   155 00000083 8EE8                <1>   mov gs, ax
   156                              <1> 
   157 00000085 BD00000900          <1>   mov ebp, 0x00090000
   158 0000008A 89EC                <1>   mov esp, ebp
   159                              <1> 
   160 0000008C E800000000          <1>   call BEGIN_PM
   161                                  
   162                                  [bits 32]
   163                                  BEGIN_PM:
   164                                   ; This is where we arrive after switching to and initialising protected mode.
   165 00000091 BB[BE000000]             mov ebx, MSG_PROT_MODE
   166 00000096 E8A8FFFFFF               call print_string_pm	; Use our 32 - bit print routine.
   167                                  
   168 0000009B EBFE                     jmp $
   169                                  
   170 0000009D 5374617274696E6720-     MSG_REAL_MODE db "Starting in 16-bit real mode ...",0x00
   171 000000A6 696E2031362D626974-
   172 000000AF 207265616C206D6F64-
   173 000000B8 65202E2E2E00       
   174 000000BE 4C616E64656420696E-     MSG_PROT_MODE db "Landed in 32-bit protected mode!",0x00
   175 000000C7 2033322D6269742070-
   176 000000D0 726F74656374656420-
   177 000000D9 6D6F64652100       
   178                                  
   179 000000DF 00<rept>                times 510-($-$$) db 0x00
   180 000001FE 55AA                    dw 0xaa55
