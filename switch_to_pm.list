     1                                  [bits 16]
     2                                  ;switch to protected mode
     3                                  
     4 00000000 FA                      cli 	; We must switch of interrupts until we have
     5                                  	; set -up the protected mode interrupt vector
     6                                  	; otherwise interrupts will run riot.
     7                                  
     8                                  lgdt [gdt_descriptor]	; Load our global descriptor table , which defines
     9          ******************       error: symbol `gdt_descriptor' undefined
    10                                  			; the protected mode segments ( e.g. for code and data )
    11                                  
    12 00000001 0F20C0                  mov eax, cr0
    13 00000004 6683C801                or eax, 0x00000001
    14 00000008 0F22C0                  mov cr0, eax		; To make the switch to protected mode , we set
    15                                  			; the first bit of CR0 , a control register
    16                                  
    17                                  jmp CODE_SEG:init_pm	; Make a far jump ( i.e. to a new segment ) to our 32 - bit
    18          ******************       error: symbol `CODE_SEG' undefined
    19                                  			; code. This also forces the CPU to flush its cache of
    20                                  			; pre - fetched and real - mode decoded instructions , which can
    21                                  			; cause problems.
    22                                  
    23                                  [bits 32]
    24                                  
    25                                  init_pm:
    26                                   ; Initialise registers and the stack once in PM.
    27                                   mov ax, DATA_SEG
    28          ******************       error: symbol `DATA_SEG' undefined
    29 0000000B 8ED8                     mov ds, ax
    30 0000000D 8ED0                     mov ss, ax
    31 0000000F 8EC0                     mov es, ax
    32 00000011 8EE0                     mov fs, ax
    33 00000013 8EE8                     mov gs, ax
    34                                  
    35 00000015 BD00000900               mov ebp, 0x00090000
    36 0000001A 89EC                     mov esp, ebp
    37                                  
    38                                   call BEGIN_PM
    39          ******************       error: symbol `BEGIN_PM' undefined
