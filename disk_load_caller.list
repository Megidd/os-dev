     1 00000000 BB[1701]                mov bx, MSG			;bx stores print_string input
     2 00000003 E8F900                  call print_string
     3                                  
     4 00000006 8816[4400]              mov [BOOT_DRIVE], dl		;BIOS  stores  our  boot  drive  in DL, so itâ€™s
     5                                  				; best to  remember  this  for  later.
     6 0000000A BD0080                  mov bp, 0x8000
     7 0000000D 89EC                    mov sp, bp			;Here we set our stack safely out of the way , at 0x8000
     8 0000000F BB0090                  mov bx, 0x9000			; Load to destination address 0x0000(ES):0x9000(BX)
     9 00000012 B605                    mov dh, 0x05			; Read 5 sectors
    10 00000014 8A16[4400]              mov dl, [BOOT_DRIVE]
    11 00000018 E82A00                  call disk_load
    12                                  
    13 0000001B 8B160090                mov dx, [0x9000]		;dx stores print_hex input
    14                                  				;dx stores the first loaded word at address 0x9000
    15 0000001F E85200                  call print_hex			;print_hex modifies HEX_OUT content according to dx
    16 00000022 BB[F800]                mov bx,HEX_OUT
    17 00000025 E8D700                  call print_string		;print 2nd sector loaded at address 0x9000
    18                                  
    19 00000028 8B16FF91                mov dx, [0x9000+511]
    20 0000002C E84500                  call print_hex
    21 0000002F BB[F800]                mov bx,HEX_OUT
    22 00000032 E8CA00                  call print_string		;print the margin between 2nd sector and 3rd sector loaded
    23                                  
    24 00000035 8B160092                mov dx, [0x9000+512]
    25 00000039 E83800                  call print_hex
    26 0000003C BB[F800]                mov bx,HEX_OUT
    27 0000003F E8BD00                  call print_string		;print 3rd sector loaded at address 0x9000+512
    28                                  
    29 00000042 EBFE                    jmp $
    30                                  
    31                                  BOOT_DRIVE:
    32 00000044 00                       db 0x00
    33                                  
    34                                  %include "disk_load_callee.asm"
     1                              <1> disk_load:
     2 00000045 60                  <1>  pusha
     3                              <1> 
     4 00000046 52                  <1>  push dx		; Store  DX on  stack  so  later  we can  recall
     5                              <1> 			; how  many  sectors  were  request  to be read ,
     6                              <1> 			; even if it is  altered  in the  meantime
     7                              <1>  
     8 00000047 88F0                <1>  mov al, dh		; DX is input, DH stores how many sectors to read
     9                              <1> 
    10 00000049 B402                <1>  mov ah, 0x02		; BIOS read sector function
    11                              <1> 
    12                              <1> ; mov dl, 0x00		; first floppy drive
    13                              <1> 			; DL stores boot_drive, set by the caller
    14                              <1> 
    15                              <1> ; DL is already set by the caller as BOOT_DRIVE
    16                              <1> 
    17                              <1> ; mov ch, 0x03		; select cylinder 3
    18                              <1> 
    19 0000004B B500                <1>  mov ch, 0x00		; cylinder 0
    20                              <1> 
    21                              <1> ; mov dh, 0x01		; Select the track on 2nd side of floppy
    22                              <1> 			; disk , since this count has a base of 0
    23                              <1> 
    24 0000004D B600                <1>  mov dh, 0x00		; Select head 0
    25                              <1> 
    26                              <1> ; mov cl, 0x04		; Select  the 4th  sector  on the  track  - not
    27                              <1> 			; the 5th , since  this  has a base of 1.
    28                              <1> 
    29 0000004F B102                <1>  mov cl, 0x02		; Start  reading  from  second  sector (i.e.
    30                              <1> 			; after  the  boot  sector)
    31                              <1> 
    32                              <1> ; BX is already set by the caller as the destination address
    33                              <1> 
    34 00000051 CD13                <1>  int 0x13
    35 00000053 7207                <1>  jc disk_error
    36                              <1> 
    37 00000055 5A                  <1>  pop dx
    38 00000056 38C6                <1>  cmp dh, al		; if AL (sectors read) != DH (sectors expected)
    39 00000058 7502                <1>  jne disk_error
    40                              <1>  
    41 0000005A 61                  <1>  popa
    42 0000005B C3                  <1>  ret
    43                              <1> 
    44                              <1>  disk_error:
    45 0000005C BB[6400]            <1>  	mov bx, DISK_ERROR_MSG
    46 0000005F E89D00              <1>  	call print_string
    47 00000062 EBFE                <1> 	jmp $		; jump forever to the same line
    48                              <1> 
    49                              <1>  DISK_ERROR_MSG:
    50 00000064 4469736B2072656164- <1>  	db 'Disk read error',0x00
    50 0000006D 206572726F7200      <1>
    35                                  
    36                                  %include "print_hex_callee.asm"
     1                              <1> print_hex:
     2 00000074 60                  <1> 	pusha
     3                              <1> 
     4                              <1> 	; 5th digit
     5 00000075 88D1                <1> 	mov cl,dl	;The least significant byte
     6 00000077 80E10F              <1> 	and cl,0x0f	;cl contains only a half-byte
     7 0000007A B500                <1> 	mov ch, 0x00
     8 0000007C 31F6                <1> 	xor si, si	;empty si
     9 0000007E 89CE                <1> 	mov si, cx
    10 00000080 81C6007C            <1> 	add si, 0x7c00
    11 00000084 81C6[E700]          <1> 	add si, HEX_MAP
    12 00000088 8A0C                <1> 	mov cl, [si]
    13 0000008A 880E[FD7C]          <1> 	mov [0x7c00+HEX_OUT+5], cl
    14                              <1> 
    15                              <1> 	; 4th digit
    16 0000008E 88D1                <1> 	mov cl,dl
    17 00000090 80E1F0              <1> 	and cl,0xf0
    18 00000093 C0E904              <1> 	shr cl,0x04	;shift cl to right, 4 times
    19 00000096 80E10F              <1> 	and cl,0x0f
    20 00000099 B500                <1> 	mov ch, 0x00
    21 0000009B 31F6                <1> 	xor si, si	;empty si
    22 0000009D 89CE                <1> 	mov si, cx
    23 0000009F 81C6007C            <1> 	add si, 0x7c00
    24 000000A3 81C6[E700]          <1> 	add si, HEX_MAP
    25 000000A7 8A0C                <1> 	mov cl, [si]
    26 000000A9 880E[FC7C]          <1> 	mov [HEX_OUT+0x7c00+4], cl
    27                              <1> 
    28                              <1> 	; 3rd digit
    29 000000AD 88F1                <1> 	mov cl,dh
    30 000000AF 80E10F              <1> 	and cl,0x0f
    31 000000B2 B500                <1> 	mov ch, 0x00
    32 000000B4 31F6                <1> 	xor si, si	;empty si
    33 000000B6 89CE                <1> 	mov si, cx
    34 000000B8 81C6007C            <1> 	add si, 0x7c00
    35 000000BC 81C6[E700]          <1> 	add si, HEX_MAP
    36 000000C0 8A0C                <1> 	mov cl, [si]
    37 000000C2 880E[FB7C]          <1> 	mov [HEX_OUT+0x7c00+3], cl
    38                              <1> 
    39                              <1> 	; 2nd digit
    40 000000C6 88F1                <1> 	mov cl,dh
    41 000000C8 80E1F0              <1> 	and cl,0xf0
    42 000000CB C0E904              <1> 	shr cl,0x04	;shitf cl to right, 4 times
    43 000000CE 80E10F              <1> 	and cl,0x0f
    44 000000D1 B500                <1> 	mov ch, 0x00
    45 000000D3 31F6                <1> 	xor si, si	;empty si
    46 000000D5 89CE                <1> 	mov si, cx
    47 000000D7 81C6007C            <1> 	add si, 0x7c00
    48 000000DB 81C6[E700]          <1> 	add si, HEX_MAP
    49 000000DF 8A0C                <1> 	mov cl, [si]
    50 000000E1 880E[FA7C]          <1> 	mov [HEX_OUT+0x7c00+2], cl
    51                              <1> 
    52                              <1> 	; 1st digit is already correct: 'x'
    53                              <1> 	; zero digit is already correct: '0'
    54                              <1> 
    55 000000E5 61                  <1> 	popa
    56 000000E6 C3                  <1> 	ret
    57                              <1> 
    58                              <1> HEX_MAP:
    59 000000E7 303132333435363738- <1>  db '0123456789abcdef',0x00
    59 000000F0 3961626364656600    <1>
    37                                  
    38                                  HEX_OUT:			;HEX_OUT stores print_hex output
    39 000000F8 30783030303000           db '0x0000',0x00
    40                                  
    41                                  %include "print_string_callee.asm"
     1                              <1> print_string:
     2 000000FF 60                  <1> 	pusha	;push all registers to be polite
     3                              <1> 	
     4 00000100 B40E                <1> 	mov ah, 0x0e	;BIOS tele - type output
     5                              <1> 
     6 00000102 81C3007C            <1> 	add bx,0x7c00	;boot sector is loaded at 0x7c00 address
     7                              <1> 			;therefore 0x7c00 needs to be added to the data address
     8                              <1> 			;to get the correct absolute data address
     9                              <1> 	
    10                              <1> print_next_byte:
    11 00000106 8A07                <1> 	mov al,[bx]	;bx is used as function parameter
    12 00000108 3C00                <1> 	cmp al,0x00
    13 0000010A 7405                <1> 	je null_terminated
    14 0000010C CD10                <1> 	int 0x10
    15 0000010E 43                  <1> 	inc bx
    16 0000010F EBF5                <1> 	jmp print_next_byte
    17                              <1> 	
    18                              <1> null_terminated:
    19 00000111 B00A                <1> 	mov al,0x0a	;new line character
    20 00000113 CD10                <1> 	int 0x10	;print a new line
    21 00000115 61                  <1> 	popa	;pop all registers to be polite
    22 00000116 C3                  <1> 	ret	;pop return address and jump to it
    42                                  
    43                                  MSG:
    44 00000117 52656164696E672074-      db 'Reading the first n sectors following the boot sector ...',0x00
    44 00000120 686520666972737420-
    44 00000129 6E20736563746F7273-
    44 00000132 20666F6C6C6F77696E-
    44 0000013B 672074686520626F6F-
    44 00000144 7420736563746F7220-
    44 0000014D 2E2E2E00           
    45                                  
    46 00000151 00<rept>                times 510-($-$$) db 0x00	;padding
    47                                  
    48 000001FE 55AA                    dw 0xaa55			;Boot sector signature
    49                                  				;at the end of 1st sector, i.e. boot sector
    50                                  
    51 00000200 EE<rept>                times 512 db 0xee		;2nd sector filled with 0xee
    52 00000400 FF<rept>                times 512 db 0xff		;3rd sector filled with 0xff
