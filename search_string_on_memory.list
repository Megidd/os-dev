     1 00000000 BB[D700]                mov bx, MSG
     2 00000003 E8B900                  call print_string
     3                                  
     4 00000006 31FF                    xor di, di			;clear DI
     5                                  start_search_string:
     6 00000008 803D42                   cmp byte [di], 'B'		;only BX/BP/DI/SI registers can be used for addressing in 16-bit real mode
     7 0000000B 751D                     jne continue_search_string
     8 0000000D 47                       inc di
     9 0000000E 803D49                   cmp byte [di], 'I'
    10 00000011 7517                     jne continue_search_string
    11 00000013 47                       inc di
    12 00000014 803D4F                   cmp byte [di], 'O'
    13 00000017 7511                     jne continue_search_string
    14 00000019 47                       inc di
    15 0000001A 803D53                   cmp byte [di], 'S'
    16 0000001D 750B                     jne continue_search_string
    17 0000001F 89FA                     mov dx, di			;DX is print_hex input
    18 00000021 E81700                   call print_hex
    19 00000024 BB[3400]                 mov bx, HEX_OUT		;BX is print_string input
    20 00000027 E89500                   call print_string
    21                                  
    22                                   continue_search_string:
    23 0000002A 47                        inc di
    24 0000002B EBDB                      jmp start_search_string
    25                                  
    26 0000002D EBFE                    jmp $
    27                                  
    28                                  FINDME:
    29 0000002F 42494F5300               db 'BIOS',0x00
    30                                  
    31                                  HEX_OUT:			;HEX_OUT is address at print_hex output
    32 00000034 30783030303000           db '0x0000',0x00
    33                                  
    34                                  %include "print_hex_callee.asm"
     1                              <1> print_hex:
     2 0000003B 60                  <1> 	pusha
     3                              <1> 
     4                              <1> 	; 5th digit
     5 0000003C 88D1                <1> 	mov cl,dl	;The least significant byte
     6 0000003E 80E10F              <1> 	and cl,0x0f	;cl contains only a half-byte
     7 00000041 B500                <1> 	mov ch, 0x00
     8 00000043 31F6                <1> 	xor si, si	;empty si
     9 00000045 89CE                <1> 	mov si, cx
    10 00000047 81C6007C            <1> 	add si, 0x7c00
    11 0000004B 81C6[AE00]          <1> 	add si, HEX_MAP
    12 0000004F 8A0C                <1> 	mov cl, [si]
    13 00000051 880E[397C]          <1> 	mov [0x7c00+HEX_OUT+5], cl
    14                              <1> 
    15                              <1> 	; 4th digit
    16 00000055 88D1                <1> 	mov cl,dl
    17 00000057 80E1F0              <1> 	and cl,0xf0
    18 0000005A C0E904              <1> 	shr cl,0x04	;shift cl to right, 4 times
    19 0000005D 80E10F              <1> 	and cl,0x0f
    20 00000060 B500                <1> 	mov ch, 0x00
    21 00000062 31F6                <1> 	xor si, si	;empty si
    22 00000064 89CE                <1> 	mov si, cx
    23 00000066 81C6007C            <1> 	add si, 0x7c00
    24 0000006A 81C6[AE00]          <1> 	add si, HEX_MAP
    25 0000006E 8A0C                <1> 	mov cl, [si]
    26 00000070 880E[387C]          <1> 	mov [HEX_OUT+0x7c00+4], cl
    27                              <1> 
    28                              <1> 	; 3rd digit
    29 00000074 88F1                <1> 	mov cl,dh
    30 00000076 80E10F              <1> 	and cl,0x0f
    31 00000079 B500                <1> 	mov ch, 0x00
    32 0000007B 31F6                <1> 	xor si, si	;empty si
    33 0000007D 89CE                <1> 	mov si, cx
    34 0000007F 81C6007C            <1> 	add si, 0x7c00
    35 00000083 81C6[AE00]          <1> 	add si, HEX_MAP
    36 00000087 8A0C                <1> 	mov cl, [si]
    37 00000089 880E[377C]          <1> 	mov [HEX_OUT+0x7c00+3], cl
    38                              <1> 
    39                              <1> 	; 2nd digit
    40 0000008D 88F1                <1> 	mov cl,dh
    41 0000008F 80E1F0              <1> 	and cl,0xf0
    42 00000092 C0E904              <1> 	shr cl,0x04	;shitf cl to right, 4 times
    43 00000095 80E10F              <1> 	and cl,0x0f
    44 00000098 B500                <1> 	mov ch, 0x00
    45 0000009A 31F6                <1> 	xor si, si	;empty si
    46 0000009C 89CE                <1> 	mov si, cx
    47 0000009E 81C6007C            <1> 	add si, 0x7c00
    48 000000A2 81C6[AE00]          <1> 	add si, HEX_MAP
    49 000000A6 8A0C                <1> 	mov cl, [si]
    50 000000A8 880E[367C]          <1> 	mov [HEX_OUT+0x7c00+2], cl
    51                              <1> 
    52                              <1> 	; 1st digit is already correct: 'x'
    53                              <1> 	; zero digit is already correct: '0'
    54                              <1> 
    55 000000AC 61                  <1> 	popa
    56 000000AD C3                  <1> 	ret
    57                              <1> 
    58                              <1> HEX_MAP:
    59 000000AE 303132333435363738- <1>  db '0123456789abcdef',0x00
    59 000000B7 3961626364656600    <1>
    35                                  %include "print_string_callee.asm"
     1                              <1> print_string:
     2 000000BF 60                  <1> 	pusha	;push all registers to be polite
     3                              <1> 	
     4 000000C0 B40E                <1> 	mov ah, 0x0e	;BIOS tele - type output
     5                              <1> 
     6 000000C2 81C3007C            <1> 	add bx,0x7c00	;boot sector is loaded at 0x7c00 address
     7                              <1> 			;therefore 0x7c00 needs to be added to the data address
     8                              <1> 			;to get the correct absolute data address
     9                              <1> 	
    10                              <1> print_next_byte:
    11 000000C6 8A07                <1> 	mov al,[bx]	;bx is used as function parameter
    12 000000C8 3C00                <1> 	cmp al,0x00
    13 000000CA 7405                <1> 	je null_terminated
    14 000000CC CD10                <1> 	int 0x10
    15 000000CE 43                  <1> 	inc bx
    16 000000CF EBF5                <1> 	jmp print_next_byte
    17                              <1> 	
    18                              <1> null_terminated:
    19 000000D1 B00A                <1> 	mov al,0x0a	;new line character
    20 000000D3 CD10                <1> 	int 0x10	;print a new line
    21 000000D5 61                  <1> 	popa	;pop all registers to be polite
    22 000000D6 C3                  <1> 	ret	;pop return address and jump to it
    36                                  
    37                                  MSG:
    38 000000D7 536561726368696E67-      db 'Searching for string BIOS ...',0x00
    38 000000E0 20666F722073747269-
    38 000000E9 6E672042494F53202E-
    38 000000F2 2E2E00             
    39                                  
    40 000000F5 00<rept>                times 510-($-$$) db 0x00	;padding to fill 512 Bytes at boot sector
    41 000001FE 55AA                    dw 0xaa55			;boot sector signature
