     1 00000000 BAB61F                  mov dx,0x1fb6
     2 00000003 E80F00                  call print_hex		;print_hex modifies HEX_OUT content according to dx
     3 00000006 BB[0E00]                mov bx, HEX_OUT		;bx is parameter to print_string
     4 00000009 E80201                  call print_string
     5                                  
     6 0000000C EBFE                    jmp $	;jump forever
     7                                  
     8                                  HEX_OUT:
     9 0000000E 30783030303000          	db '0x0000',0x00
    10                                  	;   ||||||  |
    11                                  	;   012345  6	-> location of bytes at HEX_OUT
    12                                  
    13                                  %include 'print_hex_callee.asm'
     1                              <1> print_hex:
     2 00000015 60                  <1> 	pusha
     3                              <1> 
     4                              <1> 	; 5th digit
     5 00000016 88D1                <1> 	mov cl,dl	;The least significant byte
     6 00000018 80E10F              <1> 	and cl,0x0f	;cl contains only a half-byte
     7 0000001B B505                <1> 	mov ch,0x05	;ch contains location of half-byte at HEX_OUT
     8 0000001D E82C00              <1> 	call assign_hex_digit	;cl and ch are parameters to assign_hex_digit
     9                              <1> 
    10                              <1> 	; 4th digit
    11 00000020 88D1                <1> 	mov cl,dl
    12 00000022 80E1F0              <1> 	and cl,0xf0
    13 00000025 C0E904              <1> 	shr cl,0x04	;shift cl to right, 4 times
    14 00000028 80E10F              <1> 	and cl,0x0f
    15 0000002B B504                <1> 	mov ch,0x04
    16 0000002D E81C00              <1> 	call assign_hex_digit
    17                              <1> 
    18                              <1> 	; 3rd digit
    19 00000030 88F1                <1> 	mov cl,dh
    20 00000032 80E10F              <1> 	and cl,0x0f
    21 00000035 B503                <1> 	mov ch,0x03
    22 00000037 E81200              <1> 	call assign_hex_digit
    23                              <1> 
    24                              <1> 	; 2nd digit
    25 0000003A 88F1                <1> 	mov cl,dh
    26 0000003C 80E1F0              <1> 	and cl,0xf0
    27 0000003F C0E904              <1> 	shr cl,0x04	;shitf cl to right, 4 times
    28 00000042 80E10F              <1> 	and cl,0x0f
    29 00000045 B502                <1> 	mov ch,0x02
    30 00000047 E80200              <1> 	call assign_hex_digit
    31                              <1> 
    32                              <1> 	; 1st digit is already correct: 'x'
    33                              <1> 	; zero digit is already correct: '0'
    34                              <1> 
    35 0000004A 61                  <1> 	popa
    36 0000004B C3                  <1> 	ret
    14                                  %include 'assign_hex_digit.asm'
     1                              <1> assign_hex_digit:
     2 0000004C 60                  <1> 	pusha	;push all registers to be polite
     3                              <1> 	
     4                              <1> 	;cl is a parameter to print_hex_digit
     5                              <1> 	;ch is a parameter to print_hex_digit
     6                              <1> 	
     7 0000004D 80E10F              <1> 	and cl,0x0f	;cl contains the hex digit (half-byte) to be printed
     8                              <1> 			;bit-wise and operation, note that 0x0f is 0b0000_1111
     9                              <1> 			;to make sure cl contains only a half-byte
    10                              <1> 
    11 00000050 C706[BC00]0000      <1> 	mov [LOCATION], word 0x0000
    12 00000056 8106[BC00]007C      <1> 	add [LOCATION], word 0x7c00	;address at which boot sector is loaded
    13 0000005C 8106[BC00][0E00]    <1> 	add [LOCATION], word HEX_OUT
    14 00000062 002E[BC00]          <1> 	add [LOCATION], ch		;ch contains the hex digit location at HEX_OUT
    15 00000066 8B3E[BC00]          <1> 	mov di,[LOCATION]
    16                              <1> 
    17                              <1> cont_0:
    18 0000006A 80F900              <1> 	cmp cl,0x00
    19 0000006D 744F                <1> 	je byte_0
    20                              <1> cont_1:
    21 0000006F 80F901              <1> 	cmp cl,0x01
    22 00000072 744F                <1> 	je byte_1
    23                              <1> cont_2:
    24 00000074 80F902              <1> 	cmp cl,0x02
    25 00000077 744F                <1> 	je byte_2
    26                              <1> cont_3:
    27 00000079 80F903              <1> 	cmp cl,0x03
    28 0000007C 744F                <1> 	je byte_3
    29                              <1> cont_4:
    30 0000007E 80F904              <1> 	cmp cl,0x04
    31 00000081 744F                <1> 	je byte_4
    32                              <1> cont_5:
    33 00000083 80F905              <1> 	cmp cl,0x05
    34 00000086 744F                <1> 	je byte_5
    35                              <1> cont_6:
    36 00000088 80F906              <1> 	cmp cl,0x06
    37 0000008B 744F                <1> 	je byte_6
    38                              <1> cont_7:
    39 0000008D 80F907              <1> 	cmp cl,0x07
    40 00000090 744F                <1> 	je byte_7
    41                              <1> cont_8:
    42 00000092 80F908              <1> 	cmp cl,0x08
    43 00000095 744F                <1> 	je byte_8
    44                              <1> cont_9:
    45 00000097 80F909              <1> 	cmp cl,0x09
    46 0000009A 744F                <1> 	je byte_9
    47                              <1> cont_a:
    48 0000009C 80F90A              <1> 	cmp cl,0x0a
    49 0000009F 744F                <1> 	je byte_a
    50                              <1> cont_b:
    51 000000A1 80F90B              <1> 	cmp cl,0x0b
    52 000000A4 744F                <1> 	je byte_b
    53                              <1> cont_c:
    54 000000A6 80F90C              <1> 	cmp cl,0x0c
    55 000000A9 744F                <1> 	je byte_c
    56                              <1> cont_d:
    57 000000AB 80F90D              <1> 	cmp cl,0x0d
    58 000000AE 744F                <1> 	je byte_d
    59                              <1> cont_e:
    60 000000B0 80F90E              <1> 	cmp cl,0x0e
    61 000000B3 744F                <1> 	je byte_e
    62                              <1> cont_f:
    63 000000B5 80F90F              <1> 	cmp cl,0x0f
    64 000000B8 744F                <1> 	je byte_f
    65                              <1> cont_end:
    66 000000BA 61                  <1> 	popa	;pop all registers to be polite
    67 000000BB C3                  <1> 	ret
    68                              <1> 
    69                              <1> LOCATION:
    70 000000BC 0000                <1> 	dw 0x0000
    71                              <1> 
    72                              <1> byte_0:
    73 000000BE C60530              <1> 	mov [di], byte '0'
    74 000000C1 EBAC                <1> 	jmp cont_1
    75                              <1> byte_1:
    76 000000C3 C60531              <1> 	mov [di], byte '1'
    77 000000C6 EBAC                <1> 	jmp cont_2
    78                              <1> byte_2:
    79 000000C8 C60532              <1> 	mov [di], byte '2'
    80 000000CB EBAC                <1> 	jmp cont_3
    81                              <1> byte_3:
    82 000000CD C60533              <1> 	mov [di], byte '3'
    83 000000D0 EBAC                <1> 	jmp cont_4
    84                              <1> byte_4:
    85 000000D2 C60534              <1> 	mov [di], byte '4'
    86 000000D5 EBAC                <1> 	jmp cont_5
    87                              <1> byte_5:
    88 000000D7 C60535              <1> 	mov [di], byte '5'
    89 000000DA EBAC                <1> 	jmp cont_6
    90                              <1> byte_6:
    91 000000DC C60536              <1> 	mov [di], byte '6'
    92 000000DF EBAC                <1> 	jmp cont_7
    93                              <1> byte_7:
    94 000000E1 C60537              <1> 	mov [di], byte '7'
    95 000000E4 EBAC                <1> 	jmp cont_8
    96                              <1> byte_8:
    97 000000E6 C60538              <1> 	mov [di], byte '8'
    98 000000E9 EBAC                <1> 	jmp cont_9
    99                              <1> byte_9:
   100 000000EB C60539              <1> 	mov [di], byte '9'
   101 000000EE EBAC                <1> 	jmp cont_a
   102                              <1> byte_a:
   103 000000F0 C60561              <1> 	mov [di], byte 'a'
   104 000000F3 EBAC                <1> 	jmp cont_b
   105                              <1> byte_b:
   106 000000F5 C60562              <1> 	mov [di], byte 'b'
   107 000000F8 EBAC                <1> 	jmp cont_c
   108                              <1> byte_c:
   109 000000FA C60563              <1> 	mov [di], byte 'c'
   110 000000FD EBAC                <1> 	jmp cont_d
   111                              <1> byte_d:
   112 000000FF C60564              <1> 	mov [di], byte 'd'
   113 00000102 EBAC                <1> 	jmp cont_e
   114                              <1> byte_e:
   115 00000104 C60565              <1> 	mov [di], byte 'e'
   116 00000107 EBAC                <1> 	jmp cont_f
   117                              <1> byte_f:
   118 00000109 C60566              <1> 	mov [di], byte 'f'
   119 0000010C EBAC                <1> 	jmp cont_end
    15                                  %include 'print_string_callee.asm'
     1                              <1> print_string:
     2 0000010E 60                  <1> 	pusha	;push all registers to be polite
     3                              <1> 	
     4 0000010F B40E                <1> 	mov ah, 0x0e	;BIOS tele - type output
     5                              <1> 
     6 00000111 81C3007C            <1> 	add bx,0x7c00	;boot sector is loaded at 0x7c00 address
     7                              <1> 			;therefore 0x7c00 needs to be added to the data address
     8                              <1> 			;to get the correct absolute data address
     9                              <1> 	
    10                              <1> print_next_byte:
    11 00000115 8A07                <1> 	mov al,[bx]	;bx is used as function parameter
    12 00000117 3C00                <1> 	cmp al,0x00
    13 00000119 7405                <1> 	je null_terminated
    14 0000011B CD10                <1> 	int 0x10
    15 0000011D 43                  <1> 	inc bx
    16 0000011E EBF5                <1> 	jmp print_next_byte
    17                              <1> 	
    18                              <1> null_terminated:
    19 00000120 B00A                <1> 	mov al,0x0a	;new line character
    20 00000122 CD10                <1> 	int 0x10	;print a new line
    21 00000124 61                  <1> 	popa	;pop all registers to be polite
    22 00000125 C3                  <1> 	ret	;pop return address and jump to it
    16                                  
    17 00000126 00<rept>                times 510-($-$$) db 0x00	;padding to fill the rest of 512-byte boot sector
    18                                  
    19 000001FE 55AA                    dw 0xaa55	;magic number
