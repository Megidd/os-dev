     1                                  gdt_start:
     2                                  
     3                                  gdt_null:
     4 00000000 00000000                 dd 0x00000000
     5 00000004 00000000                 dd 0x00000000
     6                                  
     7                                  gdt_code:	;the code segment descriptor
     8                                   ; base =0x0 , limit =0 xfffff ,
     9                                   ; 1st flags : ( present )1 ( privilege )00 ( descriptor type )1 -> 1001 b
    10                                   ; type flags : ( code )1 ( conforming )0 ( readable )1 ( accessed )0 -> 1010 b
    11                                   ; 2nd flags : ( granularity )1 (32 - bit default )1 (64 - bit seg )0 ( AVL )0 -> 1100 b
    12 00000008 FFFF                     dw 0xffff	;limit=0xffff (bit 0 to 15)
    13 0000000A 0000                     dw 0x0000	;base=0x0000 (bit 16 to 31)
    14 0000000C 00                       db 0x00	;base=0x00 (bit 0 to 7) (start the second 32-bit)
    15 0000000D 9A                       db 0b10011010	;present=1 privilege=00 descriptor-type=1 code=1 conforming=0 readable=1 accessed=0
    16 0000000E CF                       db 0b11001111	;granularity=1 32-bit-default=1 64-bit=0 available=0 limit=0xf=0b1111 (bit 16 to 19)
    17 0000000F 00                       db 0x00	;base=0x00 (bit 24 to 31)
    18                                  
    19                                  gdt_data:	;the data segment descriptor
    20                                   ; Same as code segment except for the type flags :
    21                                   ; type flags : ( code )0 ( expand down )0 ( writable )1 ( accessed )0 -> 0010 b
    22 00000010 FFFF                     dw 0xffff      ;limit=0xffff (bit 0 to 15)
    23 00000012 0000                     dw 0x0000      ;base=0x0000 (bit 16 to 31)
    24 00000014 00                       db 0x00        ;base=0x00 (bit 0 to 7) (start the second 32-bit)
    25 00000015 92                       db 0b10010010  ;present=1 privilege=00 descriptor-type=1 code=0 expand-down=0 writable=1 accessed=0
    26 00000016 CF                       db 0b11001111  ;granularity=1 32-bit-default=1 64-bit=0 available=0 limit=0xf=0b1111 (bit 16 to 19)
    27 00000017 00                       db 0x00        ;base=0x00 (bit 24 to 31)
    28                                  
    29                                  gdt_end:
    30                                   ; The reason for putting a label at the end of the
    31                                   ; GDT is so we can have the assembler calculate
    32                                   ; the size of the GDT for the GDT decriptor ( below )
    33                                  
    34                                  ;GDT descriptor
    35                                  gdt_descriptor:
    36 00000018 1700                     dw gdt_end - gdt_start -1 	; Size of our GDT , always less one
    37                                  				; of the true size
    38                                  				; should be 3*8-byte=24-byte: 0d24=0x0018 ?
    39                                  				; should be 0x0018-1=0x0017
    40 0000001A [00000000]               dd gdt_start
    41                                  
    42                                  ; Define some handy constants for the GDT segment descriptor offsets , which
    43                                  ; are what segment registers must contain when in protected mode. For example ,
    44                                  ; when we set DS = 0 x10 in PM , the CPU knows that we mean it to use the
    45                                  ; segment described at offset 0 x10 ( i.e. 16 bytes ) in our GDT , which in our
    46                                  ; case is the DATA segment (0 x0 -> NULL ; 0x08 -> CODE ; 0 x10 -> DATA )
    47                                  CODE_SEG equ gdt_code - gdt_start ; shoule be 0x08 ?
    48                                  DATA_SEG equ gdt_data - gdt_start ; should be 0x10 ?
