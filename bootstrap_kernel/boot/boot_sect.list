     1                                  ; A boot sector that boots a C kernel in 32 - bit protected mode
     2                                  [org 0x7c00]
     3                                  KERNEL_OFFSET equ 0x1000
     4 00000000 8816[F100]              mov [BOOT_DRIVE], dl	; BIOS stores our boot drive in DL , so it 's
     5                                  			; best to remember this for later
     6                                  
     7 00000004 31C0                    xor ax, ax
     8 00000006 8ED8                    mov ds, ax		;zero-out DS
     9 00000008 8EC0                    mov es, ax		;zero-out ES
    10                                  
    11 0000000A BD0090                  mov bp, 0x9000		; Set-up the stack.
    12 0000000D 89EC                    mov sp, bp
    13                                  
    14 0000000F BB[F200]                mov bx, MSG_REAL_MODE
    15 00000012 E80800                  call print_string_abs
    16                                  
    17 00000015 E8B500                  call load_kernel
    18 00000018 E84600                  call switch_to_pm
    19                                  
    20 0000001B EBFE                    jmp $			; Hang
    21                                  
    22                                  ; Include our useful , hard - earned routines
    23                                  %include "routines/print_string_abs.asm"
    24                              <1> print_string_abs:
    25 0000001D 60                  <1> 	pusha	;push all registers to be polite
    26                              <1> 	
    27 0000001E B40E                <1> 	mov ah, 0x0e	;BIOS tele - type output
    28                              <1> 
    29                              <1> 	;add bx,0x7c00	;boot sector is loaded at 0x7c00 address
    30                              <1> 			;therefore 0x7c00 needs to be added to the data address
    31                              <1> 			;to get the correct absolute data address
    32                              <1> 	
    33                              <1> print_next_byte_abs:
    34 00000020 268A07              <1> 	mov al,[es:bx]	;bx is used as function parameter
    35 00000023 3C00                <1> 	cmp al,0x00
    36 00000025 7405                <1> 	je null_terminated_abs
    37 00000027 CD10                <1> 	int 0x10
    38 00000029 43                  <1> 	inc bx
    39 0000002A EBF4                <1> 	jmp print_next_byte_abs
    40                              <1> 	
    41                              <1> null_terminated_abs:
    42 0000002C B00A                <1> 	mov al,0x0a	;new line character
    43 0000002E CD10                <1> 	int 0x10	;print a new line
    44 00000030 61                  <1> 	popa	;pop all registers to be polite
    45 00000031 C3                  <1> 	ret	;pop return address and jump to it
    46                                  %include "routines/disk_load_callee.asm"
    47                              <1> disk_load:
    48 00000032 60                  <1>  pusha
    49                              <1> 
    50 00000033 52                  <1>  push dx		; Store  DX on  stack  so  later  we can  recall
    51                              <1> 			; how  many  sectors  were  request  to be read ,
    52                              <1> 			; even if it is  altered  in the  meantime
    53                              <1>  
    54 00000034 88F0                <1>  mov al, dh		; DX is input, DH stores how many sectors to read
    55                              <1> 
    56 00000036 B402                <1>  mov ah, 0x02		; BIOS read sector function
    57                              <1> 
    58                              <1> ; mov dl, 0x00		; first floppy drive
    59                              <1> 			; DL stores boot_drive, set by the caller
    60                              <1> 
    61                              <1> ; DL is already set by the caller as BOOT_DRIVE
    62                              <1> 
    63                              <1> ; mov ch, 0x03		; select cylinder 3
    64                              <1> 
    65 00000038 B500                <1>  mov ch, 0x00		; cylinder 0
    66                              <1> 
    67                              <1> ; mov dh, 0x01		; Select the track on 2nd side of floppy
    68                              <1> 			; disk , since this count has a base of 0
    69                              <1> 
    70 0000003A B600                <1>  mov dh, 0x00		; Select head 0
    71                              <1> 
    72                              <1> ; mov cl, 0x04		; Select  the 4th  sector  on the  track  - not
    73                              <1> 			; the 5th , since  this  has a base of 1.
    74                              <1> 
    75 0000003C B102                <1>  mov cl, 0x02		; Start  reading  from  second  sector (i.e.
    76                              <1> 			; after  the  boot  sector)
    77                              <1> 
    78                              <1> ; BX is already set by the caller as the destination address
    79                              <1> 
    80 0000003E CD13                <1>  int 0x13
    81 00000040 7207                <1>  jc disk_error
    82                              <1> 
    83 00000042 5A                  <1>  pop dx
    84 00000043 38C6                <1>  cmp dh, al		; if AL (sectors read) != DH (sectors expected)
    85 00000045 7502                <1>  jne disk_error
    86                              <1>  
    87 00000047 61                  <1>  popa
    88 00000048 C3                  <1>  ret
    89                              <1> 
    90                              <1>  disk_error:
    91 00000049 BB[5100]            <1>  	mov bx, DISK_ERROR_MSG
    92 0000004C E8CEFF              <1>  	call print_string_abs
    93 0000004F EBFE                <1> 	jmp $		; jump forever to the same line
    94                              <1> 
    95                              <1>  DISK_ERROR_MSG:
    96 00000051 4469736B2072656164- <1>  	db 'Disk read error',0x00
    97 0000005A 206572726F7200      <1>
    98                                  %include "routines/switch_to_pm.asm"
    99                              <1> [bits 16]
   100                              <1> ;switch to protected mode
   101                              <1> 
   102                              <1> switch_to_pm:
   103                              <1> 
   104 00000061 FA                  <1>  cli 	; We must switch of interrupts until we have
   105                              <1> 	; set -up the protected mode interrupt vector
   106                              <1> 	; otherwise interrupts will run riot.
   107                              <1> 
   108 00000062 0F0116[A800]        <1>  lgdt [gdt_descriptor]	; Load our global descriptor table , which defines
   109                              <1> 			; the protected mode segments ( e.g. for code and data )
   110                              <1> 
   111 00000067 0F20C0              <1>  mov eax, cr0
   112 0000006A 6683C801            <1>  or eax, 0x00000001
   113 0000006E 0F22C0              <1>  mov cr0, eax		; To make the switch to protected mode , we set
   114                              <1> 			; the first bit of CR0 , a control register
   115                              <1> 
   116 00000071 EA[7600]0800        <1>  jmp CODE_SEG:init_pm	; Make a far jump ( i.e. to a new segment ) to our 32 - bit
   117                              <1> 			; code. This also forces the CPU to flush its cache of
   118                              <1> 			; pre - fetched and real - mode decoded instructions , which can
   119                              <1> 			; cause problems.
   120                              <1> 
   121                              <1>  [bits 32]
   122                              <1> 
   123                              <1>  init_pm:
   124                              <1>   ; Initialise registers and the stack once in PM.
   125 00000076 66B81000            <1>   mov ax, DATA_SEG
   126 0000007A 8ED8                <1>   mov ds, ax
   127 0000007C 8ED0                <1>   mov ss, ax
   128 0000007E 8EC0                <1>   mov es, ax
   129 00000080 8EE0                <1>   mov fs, ax
   130 00000082 8EE8                <1>   mov gs, ax
   131                              <1> 
   132 00000084 BD00000900          <1>   mov ebp, 0x00090000
   133 00000089 89EC                <1>   mov esp, ebp
   134                              <1> 
   135 0000008B E850000000          <1>   call BEGIN_PM
   136                                  %include "routines/gdt.asm"
   137                              <1> gdt_start:
   138                              <1> 
   139                              <1> gdt_null:
   140 00000090 00000000            <1>  dd 0x00000000
   141 00000094 00000000            <1>  dd 0x00000000
   142                              <1> 
   143                              <1> gdt_code:	;the code segment descriptor
   144                              <1>  ; base =0x0 , limit =0 xfffff ,
   145                              <1>  ; 1st flags : ( present )1 ( privilege )00 ( descriptor type )1 -> 1001 b
   146                              <1>  ; type flags : ( code )1 ( conforming )0 ( readable )1 ( accessed )0 -> 1010 b
   147                              <1>  ; 2nd flags : ( granularity )1 (32 - bit default )1 (64 - bit seg )0 ( AVL )0 -> 1100 b
   148 00000098 FFFF                <1>  dw 0xffff	;limit=0xffff (bit 0 to 15)
   149 0000009A 0000                <1>  dw 0x0000	;base=0x0000 (bit 16 to 31)
   150 0000009C 00                  <1>  db 0x00	;base=0x00 (bit 0 to 7) (start the second 32-bit)
   151 0000009D 9A                  <1>  db 0b10011010	;present=1 privilege=00 descriptor-type=1 code=1 conforming=0 readable=1 accessed=0
   152 0000009E CF                  <1>  db 0b11001111	;granularity=1 32-bit-default=1 64-bit=0 available=0 limit=0xf=0b1111 (bit 16 to 19)
   153 0000009F 00                  <1>  db 0x00	;base=0x00 (bit 24 to 31)
   154                              <1> 
   155                              <1> gdt_data:	;the data segment descriptor
   156                              <1>  ; Same as code segment except for the type flags :
   157                              <1>  ; type flags : ( code )0 ( expand down )0 ( writable )1 ( accessed )0 -> 0010 b
   158 000000A0 FFFF                <1>  dw 0xffff      ;limit=0xffff (bit 0 to 15)
   159 000000A2 0000                <1>  dw 0x0000      ;base=0x0000 (bit 16 to 31)
   160 000000A4 00                  <1>  db 0x00        ;base=0x00 (bit 0 to 7) (start the second 32-bit)
   161 000000A5 92                  <1>  db 0b10010010  ;present=1 privilege=00 descriptor-type=1 code=0 expand-down=0 writable=1 accessed=0
   162 000000A6 CF                  <1>  db 0b11001111  ;granularity=1 32-bit-default=1 64-bit=0 available=0 limit=0xf=0b1111 (bit 16 to 19)
   163 000000A7 00                  <1>  db 0x00        ;base=0x00 (bit 24 to 31)
   164                              <1> 
   165                              <1> gdt_end:
   166                              <1>  ; The reason for putting a label at the end of the
   167                              <1>  ; GDT is so we can have the assembler calculate
   168                              <1>  ; the size of the GDT for the GDT decriptor ( below )
   169                              <1> 
   170                              <1> ;GDT descriptor
   171                              <1> gdt_descriptor:
   172 000000A8 1700                <1>  dw gdt_end - gdt_start -1 	; Size of our GDT , always less one
   173                              <1> 				; of the true size
   174                              <1> 				; should be 3*8-byte=24-byte: 0d24=0x0018 ?
   175                              <1> 				; should be 0x0018-1=0x0017
   176 000000AA [90000000]          <1>  dd gdt_start
   177                              <1> 
   178                              <1> ; Define some handy constants for the GDT segment descriptor offsets , which
   179                              <1> ; are what segment registers must contain when in protected mode. For example ,
   180                              <1> ; when we set DS = 0 x10 in PM , the CPU knows that we mean it to use the
   181                              <1> ; segment described at offset 0 x10 ( i.e. 16 bytes ) in our GDT , which in our
   182                              <1> ; case is the DATA segment (0 x0 -> NULL ; 0x08 -> CODE ; 0 x10 -> DATA )
   183                              <1> CODE_SEG equ gdt_code - gdt_start ; shoule be 0x08 ?
   184                              <1> DATA_SEG equ gdt_data - gdt_start ; should be 0x10 ?
   185                                  %include "routines/print_string_pm.asm"
   186                              <1> [bits 32]
   187                              <1> ;Define some constants
   188                              <1> VIDEO_MEMORY equ 0x000b8000
   189                              <1> WHITE_ON_BLACK equ 0x0000000f
   190                              <1> 
   191                              <1> ; prints a null - terminated string pointed to by EBX
   192                              <1> print_string_pm:
   193 000000AE 60                  <1>  pusha
   194                              <1>  
   195 000000AF BA00800B00          <1>  mov edx, VIDEO_MEMORY ; Set edx to the start of vid mem.
   196 000000B4 81C2800C0000        <1>  add edx, 0d3200	;0xb8000 + 2 * (row * 80 + col)
   197                              <1> 			;row=20, col=0 => VIDEO_MEMORY+0d3200
   198                              <1> 			;Video Graphics Array (VGA) colour text mode with dimmensions 80x25 characters
   199                              <1>  
   200                              <1>  print_string_pm_loop:
   201                              <1>   
   202 000000BA 8A03                <1>   mov al, [ebx]
   203 000000BC B40F                <1>   mov ah, WHITE_ON_BLACK
   204                              <1>   
   205 000000BE 3C00                <1>   cmp al, 0x00
   206 000000C0 7409                <1>   je print_string_pm_done	; if (al == 0) , at end of string , so
   207                              <1> 				; jump to done
   208                              <1>   
   209 000000C2 668902              <1>   mov [edx], ax 	; Store char and attributes at current
   210                              <1> 			; character cell.
   211                              <1> 
   212 000000C5 43                  <1>   inc ebx		; Increment EBX to the next char in string.
   213 000000C6 83C202              <1>   add edx, 0x02		; Move to next character cell in vid mem.
   214 000000C9 EBEF                <1>   jmp print_string_pm_loop
   215                              <1> 
   216                              <1> print_string_pm_done:
   217 000000CB 61                  <1>  popa
   218 000000CC C3                  <1>  ret
   219                                  
   220                                  [bits 16]
   221                                  
   222                                  load_kernel:
   223 000000CD BB[1301]                 mov bx, MSG_LOAD_KERNEL
   224 000000D0 E84AFF                   call print_string_abs
   225                                  
   226 000000D3 BB0010                   mov bx, KERNEL_OFFSET	; Set-up parameters for our disk_load routine
   227 000000D6 B60F                     mov dh, 15		; we load the first 15 sectors ( excluding the boot sector ) from the boot disk ( i.e. our kernel code ) to address KERNEL_OFFSET in memory
   228 000000D8 8A16[F100]               mov dl, [BOOT_DRIVE]
   229 000000DC E853FF                   call disk_load
   230                                  
   231 000000DF C3                       ret
   232                                  
   233                                  [bits 32]
   234                                  ; This is where we arrive after switching to and initialising protected mode.
   235                                  BEGIN_PM:
   236 000000E0 BB[32010000]             mov ebx, MSG_PROT_MODE
   237 000000E5 E8C4FFFFFF               call print_string_pm
   238                                  
   239 000000EA E8(00100000)             call KERNEL_OFFSET
   240                                  
   241 000000EF EBFE                     jmp $			; Hang
   242                                  
   243                                  ; Global variables
   244 000000F1 00                      BOOT_DRIVE: db 0x00
   245 000000F2 5374617274696E6720-     MSG_REAL_MODE: db "Starting in 16-bit real mode ...",0x00
   246 000000FB 696E2031362D626974-
   247 00000104 207265616C206D6F64-
   248 0000010D 65202E2E2E00       
   249 00000113 4C6F6164696E67206B-     MSG_LOAD_KERNEL: db "Loading kernel into memory ...",0x00
   250 0000011C 65726E656C20696E74-
   251 00000125 6F206D656D6F727920-
   252 0000012E 2E2E2E00           
   253 00000132 4C616E646564206F6E-     MSG_PROT_MODE: db "Landed on 32-bit protected mode without any error!",0x00
   254 0000013B 2033322D6269742070-
   255 00000144 726F74656374656420-
   256 0000014D 6D6F64652077697468-
   257 00000156 6F757420616E792065-
   258 0000015F 72726F722100       
   259                                  
   260                                  ; Bootsector padding
   261 00000165 00<rept>                times 510-($-$$) db 0x00
   262 000001FE 55AA                    dw 0xaa55
